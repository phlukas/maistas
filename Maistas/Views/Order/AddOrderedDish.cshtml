@model OrderedDish

@{
	ViewData["title"] = "Patiekalo pridėjimas";
}

<div class="main-content-header container-fluid d-flex d-row justify-content-between align-items-center">
	<span class="title">@ViewData["title"]</span>
	<span class="actions">
		<a href="@Url.Action("AddDish")" class="link-primary"><i class="fa-solid fa-angles-left"></i> Atgal į sarašą</a>
	</span>
</div>

<div class="container-fluid d-flex justify-content-center">
	@using (Html.BeginForm())
	{
		@Html.AntiForgeryToken()

		@Html.ValidationSummary(true, "", new { @class = "text-danger" })

			<fieldset class="border rounded shadow p-2">
				<div class="form-group">
				@Html.LabelFor(m => m.Dish, new { @class = "control-label" })
				@Html.DropDownListFor(m => m.DishId, Model.AvailableDishes, "--------------", new { @class = "form-control" })
				@Html.ValidationMessageFor(m => m.DishId, "", new { @class = "text-danger" })
				</div>
			<div class="form-group">
				@Html.LabelFor(m => m.Quantity, new { @class = "control-label" })
				@Html.EditorFor(m => m.Quantity, new { htmlAttributes = new { @class = "form-control" } })
				@Html.ValidationMessageFor(m => m.Quantity, "", new { @class = "text-danger" })
			</div>


			@*		<div class="form-group">
			@Html.LabelFor(m => m.Vegan, new { @class = "control-label" })
			@Html.DropDownListFor(m => m.Vegan, new SelectList(Enum.GetValues(typeof(Maistas.Models.Enums.Vegan))), "Ar tinka vegetarams?")
			@Html.ValidationMessageFor(m => m.Vegan, "", new { @class = "text-danger" })
		</div>*@

			</fieldset>

			<div class="container-fluid d-flex d-row justify-content-end">
				<button name="save" value="1" class="btn btn-success"><i class="fa-solid fa-floppy-disk"></i> Išsaugoti</button>
			</div>
	}
</div>