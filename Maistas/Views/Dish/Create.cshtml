@model Dish

@{
	ViewData["title"] = "Patiekalo sukūrimas";
}

<div class="main-content-header container-fluid d-flex d-row justify-content-between align-items-center">
	<span class="title">@ViewData["title"]</span>
	<span class="actions">
		<a href="@Url.Action("Index")" class="link-primary"><i class="fa-solid fa-angles-left"></i> Atgal į sarašą</a>
	</span>
</div>

<div class="container-fluid d-flex justify-content-center">
@using (Html.BeginForm())
{
	@Html.AntiForgeryToken()

	@Html.ValidationSummary(true, "", new { @class = "text-danger" })

	<fieldset class="border rounded shadow p-2">
		<div class="form-group">
			@Html.LabelFor(m => m.Name, new { @class = "control-label" })
			@Html.EditorFor(m => m.Name, new { htmlAttributes = new { @class = "form-control" } })
			@Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
		</div>

		<div class="form-group">
			@Html.LabelFor(m => m.Price, new { @class = "control-label" })
			@Html.EditorFor(m => m.Price, new { htmlAttributes = new { @class = "form-control" } })
			@Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
		</div>

		<div class="form-group">
			@Html.LabelFor(m => m.CreatedAt, new { @class = "control-label" })
			@Html.TextBoxFor(m => m.CreatedAt, "{0:yyyy-MM-dd}", new { @class = "form-control date-picker"})
			@Html.ValidationMessageFor(m => m.CreatedAt, "", new { @class = "text-danger" })
		</div>

		<div class="form-group">
			@Html.LabelFor(m => m.Calories, new { @class = "control-label" })
			@Html.EditorFor(m => m.Calories, new { htmlAttributes = new { @class = "form-control" } })
			@Html.ValidationMessageFor(m => m.Calories, "", new { @class = "text-danger" })
		</div>

		<div class="form-group">
			@Html.LabelFor(m => m.Description, new { @class = "control-label" })
			@Html.EditorFor(m => m.Description, new { htmlAttributes = new { @class = "form-control" } })
			@Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
		</div>

		<div class="form-group">
			@Html.LabelFor(m => m.Remainder, new { @class = "control-label" })
			@Html.EditorFor(m => m.Remainder, new { htmlAttributes = new { @class = "form-control" } })
			@Html.ValidationMessageFor(m => m.Remainder, "", new { @class = "text-danger" })
		</div>

		<div class="form-group">
			@Html.LabelFor(m => m.WeightInGrams, new { @class = "control-label" })
			@Html.EditorFor(m => m.WeightInGrams, new { htmlAttributes = new { @class = "form-control" } })
			@Html.ValidationMessageFor(m => m.WeightInGrams, "", new { @class = "text-danger" })
		</div>

@*		<div class="form-group">
			@Html.LabelFor(m => m.Vegan, new { @class = "control-label" })
			@Html.DropDownListFor(m => m.Vegan, new SelectList(Enum.GetValues(typeof(Maistas.Models.Enums.Vegan))), "Ar tinka vegetarams?")
			@Html.ValidationMessageFor(m => m.Vegan, "", new { @class = "text-danger" })
		</div>*@

		<div class="form-group">
			@Html.LabelFor(m => m.Category, new { @class = "control-label" })
			@Html.DropDownListFor(m => m.CategoryId, Model.AvailableCategories, "--------------", new { @class = "form-control" })
			@Html.ValidationMessageFor(m => m.Category, "", new { @class = "text-danger" })
		</div>
	</fieldset>

	<div class="container-fluid d-flex d-row justify-content-end">
		<button name="save" value="1" class="btn btn-success"><i class="fa-solid fa-floppy-disk"></i> Išsaugoti</button>
	</div>
}
</div>